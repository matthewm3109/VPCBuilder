#   VPC BUILDER 
#   @Author: Matthew Mano 
#   @Date: 08/14/2020

#inport correct libraries 
import boto3

#Define environment variables
global regionName
regionName = ''
secretKey = ''
accessKey = ''


#Get login info from txt file in same directory
def parceTxt(rawLine): 
    locEqual = rawLine.find('=')
    length = len(rawLine)
    cleanLine = rawLine[locEqual+1:length]
    cleanLine = cleanLine.strip()
    return cleanLine

def getLoginInfo():
    lineNbr = 1
    with open('loginInfo.txt','r') as openFile: 
        regionName = parceTxt(openFile.readline())
        secretKey = parceTxt(openFile.readline())
        accessKey = parceTxt(openFile.readline())
        secureInfo = [regionName,secretKey,accessKey]
    return secureInfo

def connectToAws(creds):
    
    boto3.setup_default_session(
    aws_access_key_id=creds[2],
    aws_secret_access_key=creds[1],
    region_name=creds[0])

    clientConnect = boto3.client('ec2')
    resourceConnect = boto3.resource('ec2')
    print("1. Successfully connected to AWS")
    # This is important - the first element is the information about the object
    # The second element is the object itself 
    return [clientConnect,resourceConnect]

def createVPC(connectionAWS):
    resourceEC2 = connectionAWS[1] 
    newVpc = resourceEC2.create_vpc(CidrBlock='10.10.0.0/16')
    name = input("Enter the name of the VPC  ")
    newVpc.create_tags(Tags=[{"Key": "Name", "Value": name}])
    print("2. Successfully created VPN {}".format(name))
    publicSubnet =  createSubnet(connectionAWS,newVpc.id,1)
    print("3. Successfully created Public Subnet")
    privateSubnet = createSubnet(connectionAWS,newVpc.id,2)
    print("4. Successfully created Private Subnet")
    InternetGateway = createInternetGateway(connectionAWS,newVpc.id)
    print("5. Successfully created Internet Gateway")
    elasticIP = createElasticIP(connectionAWS,newVpc.id)
    print("6. Successfully created ElasticIP")
    NATGateway = createNATGateway(connectionAWS,publicSubnet,elasticIP['AllocationId'])
    print("7. Successfully created NAT Gateway")
    publicRouteTable = createPublicRouteTable(connectionAWS,newVpc.id,InternetGateway,publicSubnet)
    print("8. Successfully created public route table")
    privateRouteTable = createPrivateRouteTable(connectionAWS,newVpc.id,NATGateway,privateSubnet)
    print("9. Successfully created private route table")
    routeTables = returnRouteTable(connectionAWS,newVpc.id)
    defaultNacl = returnDefaultACL(connectionAWS,newVpc.id)
    return {
    'VPC: '                 :newVpc,
    'Public Subnet: '       :publicSubnet, 
    'Public Route Table:'   :publicRouteTable,
    'Private Subnet: '      :privateSubnet, 
    'Private Route Table:'  :privateRouteTable,
    'Internet Gateway: '    :InternetGateway, 
    'Elastic IP: '          :elasticIP, 
    'NAT Gateway: '         :NATGateway,
    'RouteTables: '         :routeTables,
    'Network ACL: '         :defaultNacl
    }

def createSubnet(connectionAWS,identifier,thirdOctet):
    clientEC2 = connectionAWS[0]
    response = clientEC2.create_subnet(
        VpcId=identifier ,
        CidrBlock='10.10.'+str(thirdOctet)+'.0/24'
    )
    #Return the object
    subnetId = response['Subnet']['SubnetId'] 
    subnetObj = connectionAWS[1].Subnet(subnetId)
    return subnetId 

def createInternetGateway(connectionAWS,identifier): 
    #Creates an internet gateways (Allows VPC to communicate with the public internet) 
    resourceEC2 = connectionAWS[1]
    internetGateway = resourceEC2.create_internet_gateway()

    #Assigns it to a VPC
    internetGateway.attach_to_vpc(
        VpcId = identifier
    )
    #Returns the IGW
    return internetGateway.id 

def createElasticIP(connectionAWS,identifier):
    #Reserve a public IP address for your VPC
    newElasticIP = connectionAWS[0].allocate_address(Domain = 'vpc')
    return newElasticIP

def createNATGateway(connectionAWS,publicSubnetID,allocationID):
    #Creates a NAT Gateway on the Public Subnet to send outbound traffic to internet
    #The NAT Gateway is attached to Elastic IP 
    newNATGatway = connectionAWS[0].create_nat_gateway(SubnetId = publicSubnetID, AllocationId = allocationID)
    #Get the public and private IP addresses of the NAT gatway 
    NATGatewayID = newNATGatway['NatGateway']['NatGatewayId']
    return NATGatewayID

def returnRouteTable(connectionAWS, identifier):
    #Returns the default route table that was created when VPC was built 
    #Remember: The route table handles communication for the table 
    myVpc = connectionAWS[1].Vpc(identifier)
    defaultRouteTable = myVpc.route_tables.all()
    for routeTable in defaultRouteTable: 
        print('Route table found. Id = ' + routeTable.id)
        #Direct outbound traffic to the internet gateway 
        for routes in routeTable.routes: 
            #Default route table allows for communication within VPC
            print(' |_ Existing route: {}'.format(routes))
        return routeTable
    print ('8. No Default Route table found')
    return None 
    
def createPublicRouteTable(connectionAWS, identifier, internetGatewayID,publicSubnetID):
    #Create the route table
    publicRouteTableResponse = connectionAWS[0].create_route_table(VpcId = identifier)
    #Get the unique identifier 
    publicRouteTableID = publicRouteTableResponse["RouteTable"]["RouteTableId"]
    #Retrive Route Table Resource Object using the ID contained in the responses 
    publicRouteTable = connectionAWS[1].RouteTable(publicRouteTableID)
    #Route traffic to the Internet Gateway 
    internetRoute = publicRouteTable.create_route(
        DestinationCidrBlock = '0.0.0.0/0',
        GatewayId = internetGatewayID
    )
    #Associate route table with public subnet 
    pubAssc = publicRouteTable.associate_with_subnet(SubnetId = publicSubnetID)
    return publicRouteTableID

def createPrivateRouteTable(connectionAWS, identifier, NATGatewayID,privateSubnetID):
    #Create the route table
    privateRouteTableResponse = connectionAWS[0].create_route_table(VpcId = identifier)
    #Get the unique identifier 
    privateRouteTableID = privateRouteTableResponse["RouteTable"]["RouteTableId"]
    #Retrive Route Table Resource Object using the ID contained in the responses 
    privateRouteTable = connectionAWS[1].RouteTable(privateRouteTableID)
    #Route traffic to the Internet Gateway 
    internetRoute = privateRouteTable.create_route(
        DestinationCidrBlock = '0.0.0.0/0',
        NatGatewayId = NATGatewayID
    )
    #Associate route table with public subnet 
    priAssc = privateRouteTable.associate_with_subnet(SubnetId = privateSubnetID)
    return privateRouteTableID

def returnDefaultACL(connectionAWS, identifier):
    #ACL is a stateless firefall
    #one is created by default that allows all inbound/outbound traffic
    myVpc = connectionAWS[1].Vpc(identifier)
    naclIterable = myVpc.network_acls.all()
    for nacl in naclIterable: 
        if nacl.is_default == True: 
            print('9. Default Network ACL Found')
            entriesList = nacl.entries
            #an entry is the rule itself 
            for entry in entriesList: 
                #The return obj is a dict. If the Egress element is false, then it is an Inbound rule 
                print(' |_ Existing entry: {}'.format(entry))
            return nacl 

if __name__ == "__main__":
    creds = getLoginInfo()
    connectionsAWS = connectToAws(creds)
    objList = createVPC(connectionsAWS)
    print(objList)




